version: '2.1'
commands:

  aws-oidc-authentication-terraform-plan:
    description: "Authenticate with AWS using a CircleCI OIDC token and run terraform."
    parameters:
      aws-default-region: 
        type: env_var_name
        default: AWS_DEFAULT_REGION
      aws-role-arn: 
        type: env_var_name
        default: AWS_ROLE_ARN
      backend-storage-bucket:
        type: env_var_name
        default: BACKEND_BUCKET     
      backend-dynamodb-table:
        type: env_var_name
        default: BACKEND_DYNAMODB_TABLE
      backend-key:
        type: env_var_name
        default: BACKEND_KEY
    steps:
      - checkout
      - run: 
          command: |
            export TF_LOG="DEBUG"
            export TF_LOG_PATH="/tmp/artifacts/terraform-oidc-plan.log"

            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
               --role-arn ${AWS_ROLE_ARN} \
               --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}" \
               --web-identity-token $CIRCLE_OIDC_TOKEN \
               --duration-seconds 3600 \
               --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
               --output text)
            export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

            # interact with AWS
            aws sts get-caller-identity

            python3 /rackspace/plan.py

          name: Terraform Plan OIDC Backend
      - store_artifacts:
          path: /tmp/artifacts
          destination: /
      - persist_to_workspace:
          root: workspace
          paths:
            - .terraform.*.tar.gz
            - terraform.*.plan
            - layers


  aws-oidc-authentication-terraform-apply:
    description: "Authenticate with AWS using a CircleCI OIDC token and run terraform."
    parameters:
      aws-default-region: 
        type: env_var_name
        default: AWS_DEFAULT_REGION
      aws-role-arn: 
        type: env_var_name
        default: AWS_ROLE_ARN
      backend-storage-bucket:
        type: env_var_name
        default: BACKEND_BUCKET     
      backend-dynamodb-table:
        type: env_var_name
        default: BACKEND_DYNAMODB_TABLE
      backend-key:
        type: env_var_name
        default: BACKEND_KEY
    steps:
      - attach_workspace:
          at: workspace
      - run: 
          command: |

            export TF_LOG="DEBUG"
            export TF_LOG_PATH="/tmp/artifacts/terraform-oidc-apply.log"

            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
               --role-arn ${AWS_ROLE_ARN} \
               --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}" \
               --web-identity-token $CIRCLE_OIDC_TOKEN \
               --duration-seconds 3600 \
               --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
               --output text)
            export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

            # interact with AWS
            aws sts get-caller-identity

            # apply 
            python3 /rackspace/apply.py

          name: Terraform Apply - Access Key for Backend, OIDC for provider 

      - store_artifacts:
          path: /tmp/artifacts
          destination: /    
jobs:
  terraform-test:
    resource_class: small
    docker:
      - image: codeinavan/pipeline-toolbox-aws:latest
    steps:
      - aws-oidc-authentication-terraform-plan
      - aws-oidc-authentication-terraform-apply

workflows:
  example-workflow:
    jobs:
      - terraform-test:
          name: Verify AWS OIDC
          context: 
          - aws-oidc-dev