version: '2.1'
commands:



  az-oidc-authentication-terraform-plan:
    description: "Authenticate with Azure using a CircleCI OIDC token and run terraform with terraform binary."
    parameters:
      client-secret: 
        type: env_var_name
        default: AZURE_CLIENT_SECRET
      client-id: 
        type: env_var_name
        default: AZURE_CLIENT_ID
      tenant-id: 
        type: env_var_name
        default: AZURE_TENANT_ID
      subscription-id:
        type: env_var_name
        default: AZURE_SUBSCRIPTION_ID
      backend-resource-group-name:
        type: env_var_name
        default: BACKEND_RG
      backend-storage-account-name:
        type: env_var_name
        default: BACKEND_SG      
      backend-container-name:
        type: env_var_name
        default: BACKEND_CONTAINER
      backend-key:
        type: env_var_name
        default: BACKEND_KEY
    steps:
      - checkout
      - run: 
          command: |
            export ARM_OIDC_TOKEN=$CIRCLE_OIDC_TOKEN

            export ARM_CLIENT_ID="${<< parameters.client-id >>}"
            export ARM_SUBSCRIPTION_ID="${<< parameters.subscription-id >>}"
            export ARM_TENANT_ID="${<< parameters.tenant-id >>}"
            export ARM_USE_OIDC=true
            export TF_LOG="DEBUG"
            export TF_LOG_PATH="/tmp/artifacts/terraform-oidc-plan-tf.log"

            mkdir -p /tmp/artifacts/

            pushd layers/000base

            # OIDC INIT
            terraform init \
              -backend-config="resource_group_name=$BACKEND_RG" \
              -backend-config="storage_account_name=$BACKEND_SG" \
              -backend-config="container_name=$BACKEND_CONTAINER" \
              -backend-config="key=$BACKEND_KEY" \
              -backend-config="use_oidc=true" \
              -reconfigure

            # OIDC WORKS HERE
            terraform plan

            popd

          name: Terraform Plan OIDC - TF binary 1.3.4+
      - store_artifacts:
          path: /tmp/artifacts
          destination: /


  az-oidc-authentication-terraform-plan-python:
    description: "Authenticate with Azure using a CircleCI OIDC token and run terraform with python."
    parameters:
      client-secret: 
        type: env_var_name
        default: AZURE_CLIENT_SECRET
      client-id: 
        type: env_var_name
        default: AZURE_CLIENT_ID
      tenant-id: 
        type: env_var_name
        default: AZURE_TENANT_ID
      subscription-id:
        type: env_var_name
        default: AZURE_SUBSCRIPTION_ID
      backend-resource-group-name:
        type: env_var_name
        default: BACKEND_RG
      backend-storage-account-name:
        type: env_var_name
        default: BACKEND_SG      
      backend-container-name:
        type: env_var_name
        default: BACKEND_CONTAINER
      backend-key:
        type: env_var_name
        default: BACKEND_KEY
    steps:
      - checkout
      - run: 
          command: |
            export ARM_OIDC_TOKEN=$CIRCLE_OIDC_TOKEN

            export ARM_CLIENT_ID="${<< parameters.client-id >>}"
            export ARM_SUBSCRIPTION_ID="${<< parameters.subscription-id >>}"
            export ARM_TENANT_ID="${<< parameters.tenant-id >>}"
            export ARM_USE_OIDC=true
            export TF_LOG="DEBUG"
            export TF_LOG_PATH="/tmp/artifacts/terraform-oidc-plan-python.log"

            python3 /rackspace/plan-oidc.py
          name: Terraform Plan OIDC Python
      - store_artifacts:
          path: /tmp/artifacts
          destination: /

      - persist_to_workspace:
          root: workspace
          paths:
            - .terraform.*.tar.gz
            - terraform.*.plan
            - layers


  az-oidc-authentication-terraform-apply-python:
    description: "Authenticate with Azure using a CircleCI OIDC token and run terraform with python."
    parameters:
      client-id: 
        type: env_var_name
        default: AZURE_CLIENT_ID
      tenant-id: 
        type: env_var_name
        default: AZURE_TENANT_ID
      subscription-id:
        type: env_var_name
        default: AZURE_SUBSCRIPTION_ID
      backend-resource-group-name:
        type: env_var_name
        default: BACKEND_RG
      backend-storage-account-name:
        type: env_var_name
        default: BACKEND_SG      
      backend-container-name:
        type: env_var_name
        default: BACKEND_CONTAINER
      backend-key:
        type: env_var_name
        default: BACKEND_KEY
    steps:
      - attach_workspace:
          at: workspace
      - run: 
          command: |
            export ARM_OIDC_TOKEN=$CIRCLE_OIDC_TOKEN
            export ARM_CLIENT_ID="${<< parameters.client-id >>}"
            export ARM_SUBSCRIPTION_ID="${<< parameters.subscription-id >>}"
            export ARM_TENANT_ID="${<< parameters.tenant-id >>}"
            export ARM_USE_OIDC=true
            export TF_LOG="DEBUG"
            export TF_LOG_PATH="/tmp/artifacts/terraform-oidc-apply-python.log"

            python3 /rackspace/apply-oidc.py

          name: Terraform Apply - OIDC Python   
      - store_artifacts:
          path: /tmp/artifacts
          destination: /  
jobs:
  terraform-test:
    resource_class: small
    docker:
      - image: codeinavan/pipeline-toolbox-tf:latest
    steps:
      - az-oidc-authentication-terraform-plan
      - az-oidc-authentication-terraform-plan-python
      - az-oidc-authentication-terraform-apply-python

workflows:
  example-workflow:
    jobs:
      - terraform-test:
          name: Verify Azure OIDC
          context: 
          - azure-oidc-dev
